Zülal Nur Hıdıroğlu
CS 224
SEC-6

LAB05

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule
module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module and2(input logic  a,b,
            output logic c
             );
     assign c = a & b;
endmodule

`timescale 1ns / 1ps
module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

  maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

  aludec  ad (funct, aluop, alucontrol);

endmodule
module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                output logic [31:0] instrF,		
                output logic [31:0] instrD, PC, PCF,
                output logic PcSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                output logic ForwardAD, ForwardBD,StallF, StallD, EqualD,FlushE); 

  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F, PcPlus4D,rd1D,rd2D, writeData3D, SignImmD;	
  	logic [31:0] outRd1Dmux, outRd2Dmux,shiftSignImmD;
  	logic RegWriteW;
  	logic [4:0] writeRegD, writeAddress3D;
  	
  	    // wires for execution 
  logic [31:0] rd1E, rd2E, SignImmE, WriteRegE, SrcAE, SrcBE, ALUOutM, ResultW;
  logic [4:0] RsE, RtE, RdE;
  logic RegWriteE, MemtoRegE,MemWriteE, ALUSrcE, RegDstE, zero;
  logic [2:0] ALUControlE;
  
  
  	// Do some operations
 logic MemWriteM, MemtoRegM;
 logic[4:0] WriteRegM;
 logic [31:0] WriteDataM, ReadDataM;
 
   	// Do some operations
  logic RegWriteM, MemtoRegW;
  logic [31:0] ALUOutW, ReadDataW;
  logic [4:0] WriteRegW;
  	// Instantiate PipeWtoF
  	PipeWtoF pipe1(PC,
                ~StallF, clk, reset,
                PCF);
  
  	// Do some operations
    assign PcPlus4F = PCF + 4;
    assign PcSrcB = PcBranchD;
	assign PcSrcA = PcPlus4F;
  	mux2 #(32) pc_mux(PcSrcA, PcSrcB, PcSrcD, PC);
    imem im1(PCF[7:2], instrF);
   //adder pcAdd(PCF, 32'd4,PcPlus4F);
  	// Instantiate PipeFtoD
    PipeFtoD pipe2(instrF, PcPlus4F, ~StallD,PcSrcD,clk,reset,instrD,PcPlus4D);
    regfile rf(clk,reset, RegWriteW,instrD[25:21], instrD[20:16], WriteRegW, ResultW,rd1D,rd2D);
    mux2 #(32) rd1mux (rd1D, ALUOutM,ForwardAD,outRd1Dmux); 
    mux2 #(32) rd2mux (rd2D, ALUOutM,ForwardBD,outRd2Dmux); //Alu yok
    equalityCheck equality(outRd1Dmux, outRd2Dmux,EqualD);
    signext immediate( instrD[15:0], SignImmD);
    sl2 sh(SignImmD, shiftSignImmD);
    adder add( PcPlus4D, shiftSignImmD,PcBranchD);
    and2 andBranch(EqualD, BranchD,PcSrcD);
  	// Do some operations
  	

  	// Instantiate PipeDtoE
  PipeDtoE pipe3(rd1D,rd2D, SignImmD, instrD[25:21],instrD[20:16],instrD[15:11], RegWriteD, MemtoRegD,
  MemWriteD,ALUSrcD, RegDstD,ALUControlD, FlushE, clk, reset, rd1E, rd2E, SignImmE, RsE, RtE, RdE, RegWriteE,
  MemtoRegE,MemWriteE, ALUSrcE, RegDstE, ALUControlE); //FlushE used for clear
  
  mux2 #(32)exemux1(RtE,RdE, RegDstE, WriteRegE);
  mux4 #(32)muxForwardA(rd1E, ResultW, ALUOutM,0, ForwardAE, SrcAE);
  mux4 #(32)muxForwardB(rd2E, ResultW, ALUOutM,0, ForwardBE, WriteDataE);
  mux2 #(32)exemux2(WriteDataE,SignImmE, ALUSrcE, SrcBE);
  alu alu1(SrcAE, SrcBE, ALUControlE, ALUOutE, zero);

  	// Instantiate PipeEtoM
  PipeEtoM pipe4(clk, reset, RegWriteE, MemtoRegE, MemWriteE, WriteRegE, ALUOutE,WriteDataE, MemWriteM, MemtoRegM, RegWriteM,
  WriteRegM, WriteDataM, ALUOutM); 
  
  dmem mem(clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);

  	// Instantiate PipeMtoW
 PipeMtoW pipe5( clk, reset, RegWriteM, MemtoRegM, ALUOutM, ReadDataM, WriteRegM,
 RegWriteW, MemtoRegW, ALUOutW, ReadDataW, WriteRegW);
 mux2 #(32) resultMux(  ALUOutW,ReadDataW,MemtoRegW, ResultW);
  	// Do some operations
  	
  HazardUnit hazard(clk,BranchD, WriteRegW, WriteRegE, RegWriteM, MemtoRegM, WriteRegM,
  RegWriteE, MemtoRegE,RegWriteW, RsE,RdE,instrD[25:21], instrD[20:16], ForwardAE, ForwardBE,
  FlushE,StallD,StallF,ForwardAD, ForwardBD);

endmodule
module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module equalityCheck(input logic [31:0] a,b,
                     output logic check
  );
  always_comb 
  begin
  if(a != b)
     check = 0;
  else 
    check = 1;
  end
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule
module HazardUnit( input logic clk,
                input logic BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,RegWriteW,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 );   
logic lwstall, branchstall;
always_comb
		begin
	// Forward D
	assign ForwardAD = (rsD !=0 & rsD == WriteRegM & RegWriteM); 
	assign ForwardBD = (rtD !=0 & rtD == WriteRegM & RegWriteM); 
		// Stalling
	assign branchstall = (BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD)) |(BranchD & MemtoRegM & (WriteRegM == rsD | WriteRegM == rtD));
	assign lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;
	
	assign StallD = lwstall | branchstall;
	assign StallF = lwstall | branchstall;
	assign FlushE = lwstall | branchstall;
	
			if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM)
				ForwardAE = 2'b10;
			else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW)
				ForwardAE = 2'b01;
			else
				ForwardAE = 2'b00;
          
			if ((rtE != 0) & (rtE == WriteRegM) & RegWriteM)
				ForwardBE = 2'b10;
			else if ((rtE != 0) & (rtE == WriteRegW) & RegWriteW)
				ForwardBE = 2'b01;
			else
				ForwardBE = 2'b00;
		end
	

endmodule 

// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//  An example test program is given below.        
//	***************************************************************************
//
//		address		instruction
 //compute use 
//        8'h00: instr = 32'h20080015; //addi $t0, $zero, 0x0015
//        8'h04: instr = 32'h21090010; //addi $t1, $t0, 0x0010
//        8'h08: instr = 32'h01285020; //add $t2, $t1, $t0;
//load use
//        8'h00: instr = 32'h20080015; //addi $t0, $zero, 0x0015
//		8'h04: instr = 32'h20090010; //addi $t1, $zero, 0x0010
//		8'h08: instr = 32'h20100007; //addi $s0, $zero, 0x0007 
//		8'h0c: instr = 32'h20110008; //addi $s1, $zero, 0x0008
//		8'h10: instr = 32'hAC080000; //sw $t0, 0x0000($zero)
//		8'h14: instr = 32'h8C030000; //lw $v1, 0x0000($zero)
//		8'h18: instr = 32'h00701022; //sub $v0, $v1, $s0

//       BRANCH HAZARDS 
//        8'h00: instr = 32'h20080000; //addi $t0, $zero, 0x0000
//		8'h04: instr = 32'h11000002; //beq $t0, $zero, 0x0002 
//		8'h08: instr = 32'h20090004; //addi $t1, $zero, 0x0004
//		8'h0c: instr = 32'h21090001; //addi $t1, $t0, 0x0001
//		8'h10: instr = 32'h21090002; //addi $t1, $t0, 0x0002
//		8'h14: instr = 32'h20090003; //addi $t1, $zero, 0x0003
//		8'h18: instr = 32'hAC090000; //sw $t1, 0x0000($zero)   
8'h00: instr = 32'h20080007;
8'h04: instr = 32'h20090005;
8'h08: instr = 32'h01095020;
8'h0c: instr = 32'had280002;
8'h10: instr = 32'h8d090000;
8'h14: instr = 32'h11000001;
8'h18: instr = 32'h200a000a;
8'h1c: instr = 32'h2009000c;
8'h20: instr = 32'h20080005;
8'h24: instr = 32'h21090006;
8'h28: instr = 32'h01285020;
8'h2c: instr = 32'h20090006;
8'h30: instr = 32'h20040001;
8'h34: instr = 32'h20050002;
8'h38: instr = 32'had280000;
8'h3c: instr = 32'h8d090001;
8'h40: instr = 32'h8d290001;
8'h44: instr = 32'h01245020;
8'h48: instr = 32'h01255022;
8'h4c: instr = 32'h20090006;
8'h50: instr = 32'h11290002;
8'h54: instr = 32'h11200000;
8'h58: instr = 32'h11290002;
8'h5c: instr = 32'h20090005;
8'h60: instr = 32'h1128FFFC;
8'h64: instr = 32'h20000000;
       default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule
`timescale 1ns / 1ps
module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
  logic [7:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 8'b11000010; // R-type
      6'b100011: controls <= 8'b10100100; // LW
      6'b101011: controls <= 8'b00101000; // SW
      6'b000100: controls <= 8'b00010001; // BEQ
      6'b001000: controls <= 8'b10100000; // ADDI
      default:   controls <= 8'bxxxxxxxx; // illegal op
    endcase
endmodule
// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule
// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule
`timescale 1ns / 1ps
module PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic[2:0] ALUControlE);

        always_ff @(posedge clk, posedge reset)
          if(reset| clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                end

endmodule
`timescale 1ns / 1ps
module PipeEtoM(input logic clk, reset,
                input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [4:0] WriteRegE,
                input logic [31:0] AluOutE, WriteDataE,
                output logic MemWriteM, MemtoRegM, RegWriteM,
                output logic [4:0] WriteRegM,
                output logic [31:0] WriteDataM, AluOutM
 );
 always_ff @(posedge clk, posedge reset)
 begin 
      if(reset)
        begin 
        MemWriteM <= 0;
        MemtoRegM <= 0;
        RegWriteM<= 0;
        WriteRegM <= 0;
        WriteDataM <= 0;
        AluOutM <= 0;
        end
      else
        begin
        MemWriteM <= MemWriteE;
        MemtoRegM <= MemtoRegE;
        RegWriteM<= RegWriteE;
        WriteRegM <= WriteRegE;
        WriteDataM <= WriteDataE;
        AluOutM <= AluOutE;
        end
 end
endmodule

// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                          if(clear) // Can clear only if the pipe is enabled, that is, if it is not stalling.
                            begin
                        	   instrD <= 0;
                        	   PcPlus4D <= 0;
                            end
                          else
                            begin
                        		instrD<=instr;
                        		PcPlus4D<=PcPlus4F;
                            end
                        end
                
endmodule


module PipeMtoW(input logic clk, reset,
                input logic RegWriteM, MemtoRegM,
                input logic [31:0] AluOutM, ReadDataM,
                //input logic [4:0] WriteDataM n//no need for this because it wont be used in w
                input logic [4:0] WriteRegM,
                output logic RegWriteW, MemtoRegW,
                output logic [31:0] AluOutW, ReadDataW,
                output logic [4:0] WriteRegW
    );
    always_ff @(posedge clk, posedge reset)
    begin
        if( reset)
            begin 
            RegWriteW <= 0;
            MemtoRegW <= 0;
            AluOutW <= 0;
            ReadDataW <= 0;
            WriteRegW <= 0;
            end
        else 
            begin 
            RegWriteW <= RegWriteM;
            MemtoRegW <= MemtoRegM;
            AluOutW <= AluOutM;
            ReadDataW <= ReadDataM;
            WriteRegW <= WriteRegM;
            end
     end
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule
module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;
  	 else if(reset)
       for (int i=0; i<32; i++) rf[i] = {32{1'b0}};	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule
module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule
module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

`timescale 1ns / 1ps
module top_mips (input  logic  clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             output logic [2:0]  alucontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE,
             output logic ForwardAD, ForwardBD,StallF, StallD, EqualD,FlushE);
 controller cn(instrD[31:26], instrD[5:0],MemtoRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD,alucontrol,BranchD);
 datapath dp( clk, reset, alucontrol, RegWriteD,MemtoRegD,MemWriteD,ALUSrcD, RegDstD,BranchD,
 instrF,instrD, PC, PCF,PcSrcD,ALUOutE, WriteDataE,ForwardAE, ForwardBE,ForwardAD, ForwardBD,StallF, StallD, EqualD,FlushE); 
endmodule
